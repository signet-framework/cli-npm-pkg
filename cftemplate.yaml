AWSTemplateFormatVersion: 2010-09-09
Parameters:
  Region:
    Type: String
    Default: us-east-1
Resources:
  Appnetwork3001Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: 'broker:3001/tcp on app-network network'
      FromPort: 3001
      GroupId:
        Ref: AppnetworkNetwork
      IpProtocol: TCP
      ToPort: 3001
    Type: 'AWS::EC2::SecurityGroupIngress'
  SignetGateway:
    Type: 'AWS::EC2::InternetGateway'
  VPCRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: 
        Ref: SignetVPC
  SignetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId:
        Ref: SignetGateway
      VpcId:
        Ref: SignetVPC
  SignetGatewayRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - SignetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId:
        Ref: VPCRouteTable
      GatewayId:
        Ref: SignetGateway
  SignetSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCRouteTable
      SubnetId:
        Ref: SignetSubnetA
  SignetVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
  SignetSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: SignetVPC
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: 10.0.0.10/24
      MapPublicIpOnLaunch: true
    DependsOn:
      - SignetVPC
  AppnetworkNetwork:
    Properties:
      GroupDescription: signetbroker Security Group for app-network network
      VpcId:
        Ref: SignetVPC
    Type: 'AWS::EC2::SecurityGroup'
  AppnetworkNetworkIngress:
    Properties:
      Description: Allow communication within network app-network
      GroupId:
        Ref: AppnetworkNetwork
      IpProtocol: '-1'
      SourceSecurityGroupId:
        Ref: AppnetworkNetwork
    Type: 'AWS::EC2::SecurityGroupIngress'
  BrokerService:
    DependsOn:
      - BrokerTCP80Listener
      - DbService
    Properties:
      Cluster:
        'Fn::GetAtt':
          - Cluster
          - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: broker
          ContainerPort: 3001
          TargetGroupArn:
            Ref: BrokerTCP80TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: AppnetworkNetwork
          Subnets:
            - Ref: SignetSubnetA
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            'Fn::GetAtt':
              - BrokerServiceDiscoveryEntry
              - Arn
      TaskDefinition:
        Ref: BrokerTaskDefinition
    Type: 'AWS::ECS::Service'
  BrokerServiceDiscoveryEntry:
    Properties:
      Description: '"broker" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: broker
      NamespaceId:
        Ref: CloudMap
    Type: 'AWS::ServiceDiscovery::Service'
  BrokerTCP80Listener:
    Properties:
      DefaultActions:
        - ForwardConfig:
            TargetGroups:
              - TargetGroupArn:
                  Ref: BrokerTCP80TargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: TCP
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
  BrokerTCP80TargetGroup:
    Properties:
      Port: 3001
      Protocol: TCP
      TargetType: ip
      VpcId:
        Ref: SignetVPC
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
  BrokerTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - signetbroker.local
          Essential: false
          Image: 'docker/ecs-searchdomain-sidecar:1.0'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: 'AWS::Region'
              awslogs-stream-prefix: signetbroker
          Name: Broker_ResolvConf_InitContainer
        - Command:
            - ./wait-for.sh
            - 'db:5432'
            - '-t'
            - '500'
            - '--'
            - npm
            - start
          DependsOn:
            - Condition: SUCCESS
              ContainerName: Broker_ResolvConf_InitContainer
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: '3001'
            - Name: RDS_DB_NAME
              Value: postgres
            - Name: RDS_HOSTNAME
              Value: db
            - Name: RDS_PASSWORD
              Value: browni3s
            - Name: RDS_USERNAME
              Value: postgres
          Essential: true
          Image: >-
            docker.io/signetframework/signet-broker:latest
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: 'AWS::Region'
              awslogs-stream-prefix: signetbroker
          Name: broker
          PortMappings:
            - ContainerPort: 3001
              HostPort: 3001
              Protocol: tcp
          WorkingDirectory: /home/node/app
      Cpu: '256'
      ExecutionRoleArn:
        Ref: BrokerTaskExecutionRole
      Family: signetbroker-broker
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
    Type: 'AWS::ECS::TaskDefinition'
  BrokerTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly'
    Type: 'AWS::IAM::Role'
  CloudMap:
    Properties:
      Description: Private DNS namespace for signetbroker
      Name: signetbroker.local
      Vpc:
        Ref: SignetVPC
    Type: 'AWS::ServiceDiscovery::PrivateDnsNamespace'
  Cluster:
    Properties:
      ClusterName: signetbroker
    Type: 'AWS::ECS::Cluster'
  DbService:
    DependsOn:
      - DbdataNFSMountTargetOnSignetSubnetA
    Properties:
      Cluster:
        'Fn::GetAtt':
          - Cluster
          - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: AppnetworkNetwork
          Subnets:
            - Ref: SignetSubnetA
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            'Fn::GetAtt':
              - DbServiceDiscoveryEntry
              - Arn
      TaskDefinition:
        Ref: DbTaskDefinition
    Type: 'AWS::ECS::Service'
  DbServiceDiscoveryEntry:
    Properties:
      Description: '"db" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: db
      NamespaceId:
        Ref: CloudMap
    Type: 'AWS::ServiceDiscovery::Service'
  SignetEFS:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose
  DbTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - signetbroker.local
          Essential: false
          Image: 'docker/ecs-searchdomain-sidecar:1.0'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: 'AWS::Region'
              awslogs-stream-prefix: signetbroker
          Name: Db_ResolvConf_InitContainer
        - DependsOn:
            - Condition: SUCCESS
              ContainerName: Db_ResolvConf_InitContainer
          Essential: true
          HealthCheck:
            Command:
              - CMD-SHELL
              - psql postgres --command "select 1" -U postgres
          Image: >-
            docker.io/signetframework/signet-db:latest
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: 'AWS::Region'
              awslogs-stream-prefix: signetbroker
          MountPoints:
            - ContainerPath: /data/db
              SourceVolume: dbdata
          Name: db
      Cpu: '256'
      ExecutionRoleArn:
        Ref: DbTaskExecutionRole
      Family: signetbroker-db
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Ref: DbTaskRole
      Volumes:
        - EFSVolumeConfiguration:
            AuthorizationConfig:
              AccessPointId:
                Ref: DbdataAccessPoint
              IAM: ENABLED
            FilesystemId:
              Ref: SignetEFS
            TransitEncryption: ENABLED
          Name: dbdata
    Type: 'AWS::ECS::TaskDefinition'
  DbTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly'
    Type: 'AWS::IAM::Role'
  DbTaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'elasticfilesystem:ClientMount'
                  - 'elasticfilesystem:ClientWrite'
                  - 'elasticfilesystem:ClientRootAccess'
                Condition:
                  StringEquals:
                    'elasticfilesystem:AccessPointArn':
                      Ref: DbdataAccessPoint
                Effect: Allow
                Principal: {}
                Resource: '*'
            Version: 2012-10-17
          PolicyName: DbDbdataVolumeMountPolicy
    Type: 'AWS::IAM::Role'
  DbdataAccessPoint:
    Properties:
      AccessPointTags:
        - Key: com.docker.compose.project
          Value: signetbroker
        - Key: com.docker.compose.volume
          Value: dbdata
        - Key: Name
          Value: signetbroker_dbdata
      FileSystemId:
        Ref: SignetEFS
    Type: 'AWS::EFS::AccessPoint'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: b52e5cfc-bca7-4f93-8da2-36973fa68b61
  DbdataNFSMountTargetOnSignetSubnetA:
    Properties:
      FileSystemId:
        Ref: SignetEFS
      SecurityGroups:
        - Ref: AppnetworkNetwork
      SubnetId:
        Ref: SignetSubnetA
    Type: 'AWS::EFS::MountTarget'
  LoadBalancer:
    Properties:
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: 'true'
      Scheme: internet-facing
      Subnets:
        - Ref: SignetSubnetA
      Type: network
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
  LogGroup:
    Properties:
      LogGroupName: signetbroker
    Type: 'AWS::Logs::LogGroup'