AWSTemplateFormatVersion: 2010-09-09
Resources:
  Appnetwork3001Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: 'broker:3001/tcp on app-network network'
      FromPort: 3001
      GroupId:
        Ref: AppnetworkNetwork
      IpProtocol: TCP
      ToPort: 3001
    Type: 'AWS::EC2::SecurityGroupIngress'
  AppnetworkNetwork:
    Properties:
      GroupDescription: signetbroker Security Group for app-network network
      Tags:
        - Key: com.docker.compose.project
          Value: signetbroker
        - Key: com.docker.compose.network
          Value: signetbroker_app-network
      VpcId: vpc-0bb6607652fc64330
    Type: 'AWS::EC2::SecurityGroup'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: b31e0043-cc41-4eab-b389-7fb9ebd3bee7
  AppnetworkNetworkIngress:
    Properties:
      Description: Allow communication within network app-network
      GroupId:
        Ref: AppnetworkNetwork
      IpProtocol: '-1'
      SourceSecurityGroupId:
        Ref: AppnetworkNetwork
    Type: 'AWS::EC2::SecurityGroupIngress'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 638b6003-8ee1-48ca-a4aa-1b196a600515
  BrokerService:
    DependsOn:
      - BrokerTCP80Listener
      - DbService
    Properties:
      Cluster:
        'Fn::GetAtt':
          - Cluster
          - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: broker
          ContainerPort: 3001
          TargetGroupArn:
            Ref: BrokerTCP80TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: AppnetworkNetwork
          Subnets:
            - subnet-08598e3e6a37dc941
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            'Fn::GetAtt':
              - BrokerServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: com.docker.compose.project
          Value: signetbroker
        - Key: com.docker.compose.service
          Value: broker
      TaskDefinition:
        Ref: BrokerTaskDefinition
    Type: 'AWS::ECS::Service'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 95dc3a98-62cf-45cf-b3c3-66d9302ebac8
  BrokerServiceDiscoveryEntry:
    Properties:
      Description: '"broker" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: broker
      NamespaceId:
        Ref: CloudMap
    Type: 'AWS::ServiceDiscovery::Service'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 698c2a18-e0f4-4c77-b60c-1f13fee84a97
  BrokerTCP80Listener:
    Properties:
      DefaultActions:
        - ForwardConfig:
            TargetGroups:
              - TargetGroupArn:
                  Ref: BrokerTCP80TargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: TCP
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 83f7f880-463d-46f0-823d-9ef8db8b691b
  BrokerTCP80TargetGroup:
    Properties:
      Port: 3001
      Protocol: TCP
      Tags:
        - Key: com.docker.compose.project
          Value: signetbroker
      TargetType: ip
      VpcId: vpc-0bb6607652fc64330
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 372a6f6a-c159-433e-8e4d-46ad6a54662d
  BrokerTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - us-east-1.compute.internal
            - signetbroker.local
          Essential: false
          Image: 'docker/ecs-searchdomain-sidecar:1.0'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: 'AWS::Region'
              awslogs-stream-prefix: signetbroker
          Name: Broker_ResolvConf_InitContainer
        - Command:
            - ./wait-for.sh
            - 'db:5432'
            - '-t'
            - '500'
            - '--'
            - npm
            - start
          DependsOn:
            - Condition: SUCCESS
              ContainerName: Broker_ResolvConf_InitContainer
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: '3001'
            - Name: RDS_DB_NAME
              Value: postgres
            - Name: RDS_HOSTNAME
              Value: db
            - Name: RDS_PASSWORD
              Value: browni3s
            - Name: RDS_USERNAME
              Value: postgres
          Essential: true
          Image: >-
            docker.io/signetframework/signet-broker:latest
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: 'AWS::Region'
              awslogs-stream-prefix: signetbroker
          Name: broker
          PortMappings:
            - ContainerPort: 3001
              HostPort: 3001
              Protocol: tcp
          WorkingDirectory: /home/node/app
      Cpu: '256'
      ExecutionRoleArn:
        Ref: BrokerTaskExecutionRole
      Family: signetbroker-broker
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
    Type: 'AWS::ECS::TaskDefinition'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 240fe9ec-2cd4-464f-8004-093f2acd41af
  BrokerTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly'
      Tags:
        - Key: com.docker.compose.project
          Value: signetbroker
        - Key: com.docker.compose.service
          Value: broker
    Type: 'AWS::IAM::Role'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 6ca4c788-19d2-47f6-9e0e-c5fd3b617072
  CloudMap:
    Properties:
      Description: Service Map for Docker Compose project signetbroker
      Name: signetbroker.local
      Vpc: vpc-0bb6607652fc64330
    Type: 'AWS::ServiceDiscovery::PrivateDnsNamespace'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 27e9bb23-da4e-49cc-a101-cef5ab7d183c
  Cluster:
    Properties:
      ClusterName: signetbroker
      Tags:
        - Key: com.docker.compose.project
          Value: signetbroker
    Type: 'AWS::ECS::Cluster'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 3727ca55-6c54-4585-aacc-3af91469aaec
  DbService:
    DependsOn:
      - DbdataNFSMountTargetOnSubnet08598e3e6a37dc941
    Properties:
      Cluster:
        'Fn::GetAtt':
          - Cluster
          - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: AppnetworkNetwork
          Subnets:
            - subnet-08598e3e6a37dc941
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            'Fn::GetAtt':
              - DbServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: com.docker.compose.project
          Value: signetbroker
        - Key: com.docker.compose.service
          Value: db
      TaskDefinition:
        Ref: DbTaskDefinition
    Type: 'AWS::ECS::Service'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 49ebf349-6b1f-4bb1-82a2-5a147d5c16e4
  DbServiceDiscoveryEntry:
    Properties:
      Description: '"db" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: db
      NamespaceId:
        Ref: CloudMap
    Type: 'AWS::ServiceDiscovery::Service'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 4ed315ac-60ef-4da0-8edb-25568d0beeb0
  DbTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - us-east-1.compute.internal
            - signetbroker.local
          Essential: false
          Image: 'docker/ecs-searchdomain-sidecar:1.0'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: 'AWS::Region'
              awslogs-stream-prefix: signetbroker
          Name: Db_ResolvConf_InitContainer
        - DependsOn:
            - Condition: SUCCESS
              ContainerName: Db_ResolvConf_InitContainer
          Essential: true
          HealthCheck:
            Command:
              - CMD-SHELL
              - psql postgres --command "select 1" -U postgres
          Image: >-
            docker.io/signetframework/signet-db:latest
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: 'AWS::Region'
              awslogs-stream-prefix: signetbroker
          MountPoints:
            - ContainerPath: /data/db
              SourceVolume: dbdata
          Name: db
      Cpu: '256'
      ExecutionRoleArn:
        Ref: DbTaskExecutionRole
      Family: signetbroker-db
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Ref: DbTaskRole
      Volumes:
        - EFSVolumeConfiguration:
            AuthorizationConfig:
              AccessPointId:
                Ref: DbdataAccessPoint
              IAM: ENABLED
            FilesystemId: fs-02ae06fe75888f14b
            TransitEncryption: ENABLED
          Name: dbdata
    Type: 'AWS::ECS::TaskDefinition'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d45d5e65-68ff-460b-bf18-e58512015358
  DbTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly'
      Tags:
        - Key: com.docker.compose.project
          Value: signetbroker
        - Key: com.docker.compose.service
          Value: db
    Type: 'AWS::IAM::Role'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 1268a8f7-5182-4040-a7d7-93e938c55e0b
  DbTaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'elasticfilesystem:ClientMount'
                  - 'elasticfilesystem:ClientWrite'
                  - 'elasticfilesystem:ClientRootAccess'
                Condition:
                  StringEquals:
                    'elasticfilesystem:AccessPointArn':
                      Ref: DbdataAccessPoint
                Effect: Allow
                Principal: {}
                Resource:
                  - >-
                    arn:aws:elasticfilesystem:us-east-1:750762926632:file-system/fs-02ae06fe75888f14b
            Version: 2012-10-17
          PolicyName: DbDbdataVolumeMountPolicy
      Tags:
        - Key: com.docker.compose.project
          Value: signetbroker
        - Key: com.docker.compose.service
          Value: db
    Type: 'AWS::IAM::Role'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 1196ad08-c7bc-4323-8c76-f857a090e908
  DbdataAccessPoint:
    Properties:
      AccessPointTags:
        - Key: com.docker.compose.project
          Value: signetbroker
        - Key: com.docker.compose.volume
          Value: dbdata
        - Key: Name
          Value: signetbroker_dbdata
      FileSystemId: fs-02ae06fe75888f14b
    Type: 'AWS::EFS::AccessPoint'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: b52e5cfc-bca7-4f93-8da2-36973fa68b61
  DbdataNFSMountTargetOnSubnet08598e3e6a37dc941:
    Properties:
      FileSystemId: fs-02ae06fe75888f14b
      SecurityGroups:
        - Ref: AppnetworkNetwork
      SubnetId: subnet-08598e3e6a37dc941
    Type: 'AWS::EFS::MountTarget'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c5892d25-b7c3-4a63-bc53-4bc812a714f5
  LoadBalancer:
    Properties:
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: 'true'
      Scheme: internet-facing
      Subnets:
        - subnet-08598e3e6a37dc941
      Tags:
        - Key: com.docker.compose.project
          Value: signetbroker
      Type: network
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 4fc9a2c8-1a47-4caa-a1e1-50f6635e1e67
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/signetbroker
    Type: 'AWS::Logs::LogGroup'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: aff2f9eb-b494-4c6c-894c-bfc3b10da009
Metadata:
  'AWS::CloudFormation::Designer':
    aff2f9eb-b494-4c6c-894c-bfc3b10da009:
      size:
        width: 150
        height: 150
      position:
        x: 60
        'y': 90
      z: 1
      embeds: []
    4fc9a2c8-1a47-4caa-a1e1-50f6635e1e67:
      size:
        width: 60
        height: 60
      position:
        x: 250
        'y': 610
      z: 1
      embeds: []
    b52e5cfc-bca7-4f93-8da2-36973fa68b61:
      size:
        width: 60
        height: 60
      position:
        x: 540
        'y': 150
      z: 1
      embeds: []
    1196ad08-c7bc-4323-8c76-f857a090e908:
      size:
        width: 60
        height: 60
      position:
        x: 540
        'y': 60
      z: 1
      embeds: []
    1268a8f7-5182-4040-a7d7-93e938c55e0b:
      size:
        width: 60
        height: 60
      position:
        x: 710
        'y': 150
      z: 1
      embeds: []
    d45d5e65-68ff-460b-bf18-e58512015358:
      size:
        width: 60
        height: 60
      position:
        x: 540
        'y': 230
      z: 1
      embeds: []
    3727ca55-6c54-4585-aacc-3af91469aaec:
      size:
        width: 60
        height: 60
      position:
        x: 140
        'y': 480
      z: 1
      embeds: []
    27e9bb23-da4e-49cc-a101-cef5ab7d183c:
      size:
        width: 60
        height: 60
      position:
        x: 390
        'y': 340
      z: 1
      embeds: []
    4ed315ac-60ef-4da0-8edb-25568d0beeb0:
      size:
        width: 60
        height: 60
      position:
        x: 490
        'y': 340
      z: 1
      embeds: []
    6ca4c788-19d2-47f6-9e0e-c5fd3b617072:
      size:
        width: 60
        height: 60
      position:
        x: 30
        'y': 320
      z: 1
      embeds: []
    240fe9ec-2cd4-464f-8004-093f2acd41af:
      size:
        width: 60
        height: 60
      position:
        x: 140
        'y': 270
      z: 1
      embeds: []
    372a6f6a-c159-433e-8e4d-46ad6a54662d:
      size:
        width: 60
        height: 60
      position:
        x: 310
        'y': 540
      z: 1
      embeds: []
    83f7f880-463d-46f0-823d-9ef8db8b691b:
      size:
        width: 60
        height: 60
      position:
        x: 370
        'y': 610
      z: 1
      embeds: []
    698c2a18-e0f4-4c77-b60c-1f13fee84a97:
      size:
        width: 60
        height: 60
      position:
        x: 290
        'y': 340
      z: 1
      embeds: []
    b31e0043-cc41-4eab-b389-7fb9ebd3bee7:
      size:
        width: 60
        height: 60
      position:
        x: 720
        'y': 280
      z: 1
      embeds: []
    c5892d25-b7c3-4a63-bc53-4bc812a714f5:
      size:
        width: 60
        height: 60
      position:
        x: 720
        'y': 400
      z: 1
      embeds: []
    49ebf349-6b1f-4bb1-82a2-5a147d5c16e4:
      size:
        width: 60
        height: 60
      position:
        x: 540
        'y': 480
      z: 1
      embeds: []
      dependson:
        - c5892d25-b7c3-4a63-bc53-4bc812a714f5
    95dc3a98-62cf-45cf-b3c3-66d9302ebac8:
      size:
        width: 60
        height: 60
      position:
        x: 140
        'y': 370
      z: 1
      embeds: []
      dependson:
        - 83f7f880-463d-46f0-823d-9ef8db8b691b
        - 49ebf349-6b1f-4bb1-82a2-5a147d5c16e4
    638b6003-8ee1-48ca-a4aa-1b196a600515:
      source:
        id: b31e0043-cc41-4eab-b389-7fb9ebd3bee7
      target:
        id: b31e0043-cc41-4eab-b389-7fb9ebd3bee7
      z: 1